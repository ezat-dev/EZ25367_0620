<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="condition">

	<!-- 기준정보 조회 -->
	<select id="getStandardDataList" parameterType="condition"
		resultType="condition">
		SELECT *
		FROM tb_standard
		<where>
			<if
				test="item_no != null and item_no != '' and item_no != 'ALL'">
				item_no = #{item_no}
			</if>
		</where>
	</select>

	<!-- 기준정보 추가 -->
	<insert id="insertStandardData" parameterType="condition">
		INSERT INTO tb_standard (
		equipment_name,
		item_no,
		item_name,
		steel_grade,
		t_grade,
		batch,
		ref_soak_temp,
		ref_cool_temp,
		ref_cp,
		apply_soak_temp,
		apply_cool_temp,
		apply_cp,
		load1,
		load2,
		load3,
		std_load,
		hardness_req
		) VALUES (
		#{equipment_name, jdbcType=VARCHAR},
		#{item_no, jdbcType=VARCHAR},
		#{item_name, jdbcType=VARCHAR},
		#{steel_grade, jdbcType=VARCHAR},
		#{t_grade, jdbcType=VARCHAR},
		#{batch, jdbcType=VARCHAR},
		#{ref_soak_temp, jdbcType=INTEGER},
		#{ref_cool_temp, jdbcType=INTEGER},
		#{ref_cp},
		#{apply_soak_temp, jdbcType=INTEGER},
		#{apply_cool_temp, jdbcType=INTEGER},
		#{apply_cp},
		#{load1, jdbcType=INTEGER},
		#{load2, jdbcType=INTEGER},
		#{load3, jdbcType=INTEGER},
		#{std_load, jdbcType=INTEGER},
		#{hardness_req, jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 기준정보 업데이트-->
	<update id="updateStandardData" parameterType="condition">
    UPDATE tb_standard
    SET
        equipment_name = #{equipment_name, jdbcType=VARCHAR},
        item_no = #{item_no, jdbcType=VARCHAR},
        item_name = #{item_name, jdbcType=VARCHAR},
        steel_grade = #{steel_grade, jdbcType=VARCHAR},
        t_grade = #{t_grade, jdbcType=VARCHAR},
        batch = #{batch, jdbcType=VARCHAR},
        ref_soak_temp = #{ref_soak_temp, jdbcType=INTEGER},
        ref_cool_temp = #{ref_cool_temp, jdbcType=INTEGER},
        ref_cp = #{ref_cp},
        apply_soak_temp = #{apply_soak_temp, jdbcType=INTEGER},
        apply_cool_temp = #{apply_cool_temp, jdbcType=INTEGER},
        apply_cp = #{apply_cp},
        load1 = #{load1, jdbcType=INTEGER},
        load2 = #{load2, jdbcType=INTEGER},
        load3 = #{load3, jdbcType=INTEGER},
        std_load = #{std_load, jdbcType=INTEGER},
        hardness_req = #{hardness_req, jdbcType=VARCHAR}
    WHERE
        item_no = #{item_no, jdbcType=VARCHAR}
</update>

	<!-- 기준정보 삭제 -->
	<delete id="deleteStandardData" parameterType="condition">
		DELETE FROM
		tb_standard
		WHERE item_no = #{item_no}
	</delete>

	<!-- /////////////////////////////////////// -->
	<!--기준정보 -->
	<select id="getStandardInfoList" parameterType="condition"
		resultType="condition">
		SELECT *
		FROM PWO_GEO_DIVISION_DATA_EZ

		<where>
			<if test="coating_nm != null and coating_nm != ''">
				AND COATING_NM LIKE '%'||#{coating_nm}||'%'
			</if>


			<if test="group_id != null and group_id != ''">
				AND GROUP_ID LIKE '%'||#{group_id}||'%'
			</if>
			<if test="item_cd != null and item_cd != ''">
				AND ITEM_CD LIKE '%'||#{item_cd}||'%'
			</if>
			<if test="item_nm != null and item_nm != ''">
				AND ITEM_NM LIKE '%'||#{item_nm}||'%'
			</if>


		</where>
	</select>

	<insert id="saveDivisionWeight" parameterType="Condition">

		MERGE INTO PWO_GEO_DIVISION_DATA_EZ
		USING DUAL
		ON (
		<!-- PLAC_CD = #{plac_cd} AND PLNT_CD = #{plnt_cd} AND -->
		ITEM_CD = #{item_cd}
		)
		WHEN MATCHED THEN
		UPDATE SET
		group_id = #{group_id},
		item_nm = #{item_nm},
		mach_main = #{mach_main},
		mach_main_weight = #{mach_main_weight},
		mach_sub = #{mach_sub},
		mach_sub_weight = #{mach_sub_weight},
		mlpl_weight = #{mlpl_weight},
		coating_nm = #{coating_nm},
		kblack_weight = #{kblack_weight}
		WHEN NOT MATCHED THEN
		INSERT (PLAC_CD, PLNT_CD, GROUP_ID, ITEM_CD, ITEM_NM,
		MACH_MAIN, MACH_MAIN_WEIGHT, MACH_SUB, MACH_SUB_WEIGHT,
		MLPL_WEIGHT,COATING_NM, KBLACK_WEIGHT)
		VALUES (#{plac_cd}, #{plnt_cd}, #{group_id}, #{item_cd}, #{item_nm},
		#{mach_main}, #{mach_main_weight}, #{mach_sub}, #{mach_sub_weight},
		#{mlpl_weight}, #{coating_nm}, #{kblack_weight})
		<!-- INSERT INTO PWO_GEO_DIVISION_DATA_EZ ( PLAC_CD, PLNT_CD, GROUP_ID, 
			ITEM_CD, ITEM_NM, MACH_MAIN, MACH_MAIN_WEIGHT, MACH_SUB, MACH_SUB_WEIGHT, 
			MLPL_WEIGHT, KBLACK_WEIGHT ) SELECT 'JH_KR_01', '02', #{group_id}, #{item_cd}, 
			#{item_nm}, #{mach_main}, #{mach_main_weight}, #{mach_sub}, #{mach_sub_weight}, 
			#{mlpl_weight}, #{kblack_weight} FROM DUAL WHERE #{item_cd} IS NOT NULL AND 
			#{item_cd} != '' ON DUPLICATE KEY UPDATE group_id = CASE WHEN VALUES(item_cd) 
			IS NOT NULL AND VALUES(item_cd) != '' THEN VALUES(group_id) ELSE group_id 
			END, item_cd = CASE WHEN VALUES(item_cd) IS NOT NULL AND VALUES(item_cd) 
			!= '' THEN VALUES(item_cd) ELSE item_cd END, item_nm = CASE WHEN VALUES(item_cd) 
			IS NOT NULL AND VALUES(item_cd) != '' THEN VALUES(item_nm) ELSE item_nm END, 
			mach_main = CASE WHEN VALUES(item_cd) IS NOT NULL AND VALUES(item_cd) != 
			'' THEN VALUES(mach_main) ELSE mach_main END, mach_main_weight = CASE WHEN 
			VALUES(item_cd) IS NOT NULL AND VALUES(item_cd) != '' THEN VALUES(mach_main_weight) 
			ELSE mach_main_weight END, mach_sub = CASE WHEN VALUES(item_cd) IS NOT NULL 
			AND VALUES(item_cd) != '' THEN VALUES(mach_sub) ELSE mach_sub END, mach_sub_weight 
			= CASE WHEN VALUES(item_cd) IS NOT NULL AND VALUES(item_cd) != '' THEN VALUES(mach_sub_weight) 
			ELSE mach_sub_weight END, mlpl_weight = CASE WHEN VALUES(item_cd) IS NOT 
			NULL AND VALUES(item_cd) != '' THEN VALUES(mlpl_weight) ELSE mlpl_weight 
			END, kblack_weight = CASE WHEN VALUES(item_cd) IS NOT NULL AND VALUES(item_cd) 
			!= '' THEN VALUES(kblack_weight) ELSE kblack_weight END -->
	</insert>


	<delete id="delDivisionWeight" parameterType="string">
		DELETE FROM PWO_GEO_DIVISION_DATA_EZ
		WHERE item_cd = #{item_cd}
	</delete>



	<!--TC조절 -->

	<select id="getCorrStatusList" parameterType="map"
		resultType="Condition">
		SELECT *
		FROM tb_corr_status
		<where>
			<if test="equipment_name != null and equipment_name != ''">
				AND equipment_name = #{equipment_name}
			</if>

			<if test="startDate != null and startDate != ''">
				AND replacement_date <![CDATA[>=]]>
				#{startDate}
			</if>
			<if test="endDate != null and endDate != ''">
				AND replacement_date <![CDATA[<=]]>
				#{endDate}
			</if>
		</where>
		ORDER BY tdatetime DESC
	</select>

	<delete id="delCorrStatus" parameterType="string">
		DELETE FROM tb_corr_status
		WHERE no = #{no}
	</delete>


	<update id="saveCorrStatus" parameterType="corrStatus">
		UPDATE tb_corr_status
		SET
		equipment_name = #{equipment_name},
		location = #{location},
		serial_number = #{serial_number},
		replacement_date = #{replacement_date},
		next_date = #{next_date},
		replacement_cycle = #{replacement_cycle},
		remarks = #{remarks}
		WHERE no = #{no}
	</update>

	<!--조건관리 -->
	<select id="getconditionList" parameterType="Condition"
		resultType="Condition">
		SELECT *
		FROM tb_part_temp
		WHERE 1 = 1
		<if test="startDate != null and startDate != ''">
			AND `date` LIKE CONCAT(#{startDate}, '%')
		</if>
		<if test="mch_code != null and mch_code != ''">
			AND mch_code = #{mch_code}
		</if>
	</select>


	<update id="machinePartTempUpdate" parameterType="Condition">
		UPDATE tb_part_temp
		<set>
			<if test="filed == 'specific_gravity'">specific_gravity = #{value},</if>
			<if test="filed == 'visocosity'">visocosity = #{value},</if>
			<if test="filed == 'tank_temp'">tank_temp = #{value},</if>
			<if test="filed == 'chiller_temp'">chiller_temp = #{value},</if>
		</set>
		WHERE id = #{id}
	</update>









	<select id="getMachineliquidmanage" parameterType="Condition"
		resultType="Condition">
		SELECT *
		FROM tb_machineliquidmanage
		WHERE 1 = 1
		<if test="in_date != null and in_date != ''">
			AND in_date = #{in_date}
		</if>
		<if test="mch_name != null and mch_name != ''">
			AND mch_name = #{mch_name}
		</if>
	</select>

	<insert id="insertMachineliquidmanage" parameterType="Condition">
		INSERT INTO tb_machineliquidmanage (
		id,
		mch_name,
		in_date,
		m68_mixer_no,
		m68_g1_temp,
		m68_g2_temp,
		m68_g1_lot_no,
		m68_g2_lot_no,
		m68_thickener_time,
		m68_thickener_g,
		m68_thickener_lot,
		m68_post_rpm,
		m68_mixing_start_time,
		m68_mixing_time,
		m68_checker,
		m68_mch_temp,
		m68_humidity,
		m68_viscosity,
		m68_out_time,
		kmp_humidity,
		kmp_mixing_temp,
		kmp_mch_temp,
		kmp_liquid_lot_no,
		kmp_mixing_start_time,
		kmp_mixing_time,
		kmp_mch_visc,
		kmp_out_time,
		kmp_checker
		)
		VALUES (
		#{id},
		#{mch_name},
		#{in_date},
		#{m68_mixer_no},
		#{m68_g1_temp},
		#{m68_g2_temp},
		#{m68_g1_lot_no},
		#{m68_g2_lot_no},
		#{m68_thickener_time},
		#{m68_thickener_g},
		#{m68_thickener_lot},
		#{m68_post_rpm},
		#{m68_mixing_start_time},
		#{m68_mixing_time},
		#{m68_checker},
		#{m68_mch_temp},
		#{m68_humidity},
		#{m68_viscosity},
		#{m68_out_time},
		#{kmp_humidity},
		#{kmp_mixing_temp},
		#{kmp_mch_temp},
		#{kmp_liquid_lot_no},
		#{kmp_mixing_start_time},
		#{kmp_mixing_time},
		#{kmp_mch_visc},
		#{kmp_out_time},
		#{kmp_checker}
		)
		ON DUPLICATE KEY UPDATE
		in_date = VALUES(in_date),
		mch_name = VALUES(mch_name),
		m68_mixer_no = VALUES(m68_mixer_no),
		m68_g1_temp = VALUES(m68_g1_temp),
		m68_g2_temp = VALUES(m68_g2_temp),
		m68_g1_lot_no = VALUES(m68_g1_lot_no),
		m68_g2_lot_no = VALUES(m68_g2_lot_no),
		m68_thickener_time = VALUES(m68_thickener_time),
		m68_thickener_g = VALUES(m68_thickener_g),
		m68_thickener_lot = VALUES(m68_thickener_lot),
		m68_post_rpm = VALUES(m68_post_rpm),
		m68_mixing_start_time = VALUES(m68_mixing_start_time),
		m68_mixing_time = VALUES(m68_mixing_time),
		m68_checker = VALUES(m68_checker),
		m68_mch_temp = VALUES(m68_mch_temp),
		m68_humidity = VALUES(m68_humidity),
		m68_viscosity = VALUES(m68_viscosity),
		m68_out_time = VALUES(m68_out_time),
		kmp_humidity = VALUES(kmp_humidity),
		kmp_mixing_temp = VALUES(kmp_mixing_temp),
		kmp_mch_temp = VALUES(kmp_mch_temp),
		kmp_liquid_lot_no = VALUES(kmp_liquid_lot_no),
		kmp_mixing_start_time = VALUES(kmp_mixing_start_time),
		kmp_mixing_time = VALUES(kmp_mixing_time),
		kmp_mch_visc = VALUES(kmp_mch_visc),
		kmp_out_time = VALUES(kmp_out_time),
		kmp_checker = VALUES(kmp_checker)
	</insert>





	<select id="getMachineliquidmanage2" parameterType="Condition"
		resultType="Condition">
		SELECT *
		FROM tb_machineliquidmanage_2
		WHERE 1=1
		<if test="mch_name != null and mch_name != ''">
			AND mch_name = #{mch_name}
		</if>
		<if test="in_date != null and in_date != ''">
			AND in_date = #{in_date}
		</if>
		ORDER BY ck_time DESC
	</select>

	<!-- insert 매퍼: id 제외 -->
	<insert id="insertMachineliquidmanage2"
		parameterType="Condition">
		INSERT INTO tb_machineliquidmanage_2 (
		id,
		mch_name,
		in_date,
		tank_no,
		ck_time,
		liquid_lot_no,
		liquid_in,
		distilles_in,
		liquid_viscosity,
		specific_gravity,
		viscosity_after,
		ck_time2,
		operator
		)
		VALUES (
		#{id},
		#{mch_name},
		#{in_date},
		#{tank_no},
		#{ck_time},
		#{liquid_lot_no},
		#{liquid_in},
		#{distilles_in},
		#{liquid_viscosity},
		#{specific_gravity},
		#{viscosity_after},
		#{ck_time2},
		#{operator}
		)
		ON DUPLICATE KEY UPDATE
		mch_name = VALUES(mch_name),
		in_date = VALUES(in_date),
		tank_no = VALUES(tank_no),
		ck_time = VALUES(ck_time),
		liquid_lot_no = VALUES(liquid_lot_no),
		liquid_in = VALUES(liquid_in),
		distilles_in = VALUES(distilles_in),
		liquid_viscosity = VALUES(liquid_viscosity),
		specific_gravity = VALUES(specific_gravity),
		viscosity_after = VALUES(viscosity_after),
		ck_time2 = VALUES(ck_time2),
		operator = VALUES(operator)
	</insert>



	<delete id="deleteMachineliquidmanage" parameterType="int">
		DELETE FROM tb_machineliquidmanage
		WHERE id = #{id}
	</delete>
	<delete id="deleteMachineliquidmanage2" parameterType="int">
		DELETE FROM tb_machineliquidmanage_2
		WHERE id = #{id}
	</delete>

<!-- 표준문서 목록 조회 -->
	<select id="standardDocList" parameterType="Condition" resultType="Condition">
	  SELECT *
	  FROM tb_standard_doc
	  <where>
	    <if test="mch_name != null and mch_name.trim() != ''">
	      AND mch_name = #{mch_name}
	    </if>

	    <if test="startDate != null and endDate != null">
	      AND cr_date BETWEEN #{startDate} AND #{endDate}
	    </if>
	  </where>
	</select>


    <!-- 표준문서 저장 (있으면 업데이트, 없으면 인서트) -->
	<insert id="standardDocSaves" parameterType="Condition">
	    INSERT INTO tb_standard_doc (
	        idx, cr_date, mch_name, box1, box2, box3, box4, memo
	    ) VALUES (
	        #{idx}, #{cr_date}, #{mch_name}, #{box1}, #{box2}, #{box3}, #{box4}, #{memo}
	    )
	    ON DUPLICATE KEY UPDATE
	        cr_date = VALUES(cr_date),
	        mch_name = VALUES(mch_name),
	        box1 = VALUES(box1),
	        box2 = VALUES(box2),
	        box3 = VALUES(box3),
	        box4 = VALUES(box4),
	        memo = VALUES(memo)
	</insert>

    <!-- 표준문서 삭제 -->
    <delete id="standardDocDel" parameterType="Condition">
        DELETE FROM tb_standard_doc
        WHERE idx = #{idx}
    </delete>
    
    
    
    <select id="getCheckManageList" parameterType="Condition" resultType="Condition">
	  SELECT *
	  FROM tb_check_manage
	  WHERE ck_date LIKE CONCAT('%', #{ck_date}, '%')
	  ORDER BY ck_date
	</select>
	
	<update id="updateCheckManage" parameterType="Condition">
	  UPDATE tb_check_manage
	  SET
	    ck_date = #{ck_date},
	    a_1 = #{a_1},
	    a_2 = #{a_2},
	    a_3 = #{a_3},
	    a_4 = #{a_4},
	    a_5 = #{a_5}
	  WHERE idx = #{idx}
	</update>

</mapper>